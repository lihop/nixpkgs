scons does not use os environment by default:
  https://scons.org/doc/2.1.0/HTML/scons-user/x1750.html

nixpkgs' cc-wrapper on the other hand relies on various NIX_* variables
to be passed through like NIX_CFLAGS_COMPILE_BEFORE.
--- a/SConstruct
+++ b/SConstruct
@@ -67,14 +67,15 @@ elif platform_arg == "javascript":
 elif os.name == "nt" and methods.get_cmdline_bool("use_mingw", False):
     custom_tools = ["mingw"]
 
-# We let SCons build its default ENV as it includes OS-specific things which we don't
-# want to have to pull in manually.
-# Then we prepend PATH to make it take precedence, while preserving SCons' own entries.
-env_base = Environment(tools=custom_tools)
-env_base.PrependENVPath("PATH", os.getenv("PATH"))
-env_base.PrependENVPath("PKG_CONFIG_PATH", os.getenv("PKG_CONFIG_PATH"))
-if "TERM" in os.environ:  # Used for colored output.
-    env_base["ENV"]["TERM"] = os.environ["TERM"]
+# The original version of this would append the OS's PATH to the Scons PATH, but because
+# it is an append, the Scons PATH would take precedence.  The Scons PATH contains a bunch
+# of standard Linux paths like /usr/bin, so if they happen to contain versions of any
+# build-time dependencies of Godot, they will be used instead of the Nix version of them.
+#
+# This patch simply replaces the entire Scons environment (including the PATH) with that
+# of the OS. This isn't as surgical as just fixing the PATH, but it seems to work, and
+# seems to be the Nix community's current strategy when using Scons.
+env_base = Environment(ENV = os.environ, tools=custom_tools)
 
 env_base.disabled_modules = []
 env_base.use_ptrcall = False
