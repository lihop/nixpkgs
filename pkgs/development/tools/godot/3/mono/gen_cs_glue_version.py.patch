diff --git a/modules/mono/build_scripts/gen_cs_glue_version.py b/modules/mono/build_scripts/gen_cs_glue_version.py
index 98bbb4d9be..bd270c19b5 100644
--- a/modules/mono/build_scripts/gen_cs_glue_version.py
+++ b/modules/mono/build_scripts/gen_cs_glue_version.py
@@ -1,16 +1,27 @@
 def generate_header(solution_dir, version_header_dst):
-    import os
+    # When building godot, a "glue version" gets baked into it, and into the mono glue code
+    # generated by it. Export templates are also a build of godot, so they also get a glue version
+    # baked in. If you export a godot project using an export template whose glue version doesn't
+    # match that of the godot tool itself, then the resulting game will fail with an error saying
+    # "The assembly 'GodotSharp' is out of sync." Thus, if we want our build of godot to be
+    # compatible with the official export templates, we need to ensure it is built with the same
+    # glue version as the official build.
+    #
+    # This python script is used by the build process to generate the glue version number. The
+    # official version of it does so based on the latest modified time of all the C# files in the
+    # GodotSharp solution. This is problematic because it is difficult to reproduce the exact
+    # timestamps that the files had when the official build was created. This is further complicated
+    # by the fact that nix clears the timestamps on the source files when they're unpacked. Thus,
+    # we can't simply regenerate the official glue version by building from the official source.
+    #
+    # To address this, we are hard-coding the glue version number. This was obtained by running the
+    # official build with the --generate-mono-glue flag, then looking at the number hard-coded in the
+    # get_cs_glue_version() function within the resulting mono_glue.gen.cpp file.
+    #
+    # For convenience, the accompanying update-glue-version.sh script automates this work. Run it by
+    # passing the godot version as an argument, e.g. "3.5".
 
-    latest_mtime = 0
-    for root, dirs, files in os.walk(solution_dir, topdown=True):
-        dirs[:] = [d for d in dirs if d not in ["Generated"]]  # Ignored generated files
-        files = [f for f in files if f.endswith(".cs")]
-        for file in files:
-            filepath = os.path.join(root, file)
-            mtime = os.path.getmtime(filepath)
-            latest_mtime = mtime if mtime > latest_mtime else latest_mtime
-
-    glue_version = int(latest_mtime)  # The latest modified time will do for now
+    glue_version = 1659663616
 
     with open(version_header_dst, "w") as version_header:
         version_header.write("/* THIS FILE IS GENERATED DO NOT EDIT */\n")
